#!/usr/bin/env sandbash

function usage() {
	printf "${YELLOW}%s${NORMAL}\n" "usage: git-aliases [--system|--global|--local]"
}

if [ $# -lt 1 ]; then
	usage
	exit 1
fi

scope="$1"

function new_alias() {
  local alias_name=$1
  local alias_command=$2

  printf "%s\n" "New command: ${YELLOW}git ${BOLD}${alias_name}${NORMAL}"
  git config $scope alias.${alias_name} "${alias_command}"
}

function say() {
    printf "${GREEN}%s${NORMAL}\n" "$1"
}

set -e

say "Configuring aliases for aliases..."
new_alias "aliases" "!git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/= /' | sed 's/^[a-z\-]*=/- `tput bold`&`tput sgr0`/'"
new_alias "clean-aliases" "config $scope --remove-section alias"

say "Configuring aliases for history..."
new_alias "history" "log --graph --pretty=format:'%C(bold red)%h%Creset %C(dim cyan)(%cr)%Creset %C(auto)%d%Creset | %C(bold)%s%C(reset) - %C(dim white)<%aN>%Creset' --abbrev-commit --date=relative --decorate --color"
new_alias "history-of" "!git history --first-parent"
new_alias "history-all" "!git history --all"

say "Configuring aliases for refs..."
new_alias "refs" "!git history --simplify-by-decoration --no-merges"
new_alias "refs-all" "!git refs --all"

say "Configuring aliases for authors..."
new_alias "authors" '!git log --all --format="%C(bold yellow)%an%Creset %C(dim white)<%ae>%Creset" | sort -u'

say "Configuring aliases form status..."
new_alias "status-short" "status -sb -uno --ignore-submodules=untracked"

say "Configuring aliases for changes..."
new_alias "changelog" "!f() { git last-tag-id | xargs -I tag git log tag..HEAD --pretty=format:\"  %C(bold green)*%Creset [%C(red)%h%Creset] %s\" --reverse --no-merges; }; f"
new_alias "changed-words" "diff --word-diff"
new_alias "changed-files" "diff --stat"
new_alias "changes-staged" "diff --staged"

say "Configuring aliases for branches..."
new_alias "branch-publish" "!git push -u origin \$(git branch-name)"
new_alias "branch-unpublish" "!git push origin --delete \$(git branch-name)"
new_alias "branch-name" "!git rev-parse --abbrev-ref HEAD"
new_alias "branch-rename" "branch -m"
new_alias "branch-delete" "!f() { git branch -D \$1; git push origin --delete \$1; }; f"
new_alias "branches" "for-each-ref --sort='-authordate' --format='%(authordate:iso) | %(color:bold green)%(refname:short)%(color:reset)%09- %(color:dim white)%(authoremail)%(color:reset)' refs/heads"
new_alias "branches-last-commit" "branch -vv -a"

say "Configuring aliases for tags..."
new_alias "tags" "for-each-ref --sort=-taggerdate --format=\"%(color:dim cyan)%(taggerdate:iso)%(color:reset) - %(color:green)[%(refname:short)]%(color:reset) %09%(color:dim white)%(taggeremail)%(color:reset)%09// %(subject)\" refs/tags"
new_alias "last-tag" "!git show \$(git last-tag-id)"
new_alias "last-tag-id" "!git for-each-ref refs/tags --sort=-taggerdate --format='%(refname:short)' --count=1"
new_alias "distance-from-tags" "!git tag | while read t; do echo \"\$(git rev-list --count \$t..HEAD) commits ahead of '\$t'\"; done | sort -n"

say "Configuring aliases for commits..."
new_alias "first-commit" "!git show \$(git rev-list --max-parents=0 HEAD)"
new_alias "last-commit" "show HEAD"

say "Configuring aliases for (un)stage..."
new_alias "stage" "add"
new_alias "unstage" "reset HEAD --"

say "Configuring aliases for push changes..."
new_alias "push-all" "!git push --all && git push --tags"

say "Configuring aliases for remotes..."
new_alias "show-origin" "remote show origin"

say "Configuring aliases for assume unchangeds..."
new_alias "assume" "update-index --assume-unchanged"
new_alias "unassume" "update-index --no-assume-unchanged"
new_alias "assumed" "!git ls-files -v | grep ^h | cut -c 3-"
new_alias "unassume-all" "!git assumed | xargs git update-index --no-assume-unchanged"
new_alias "assume-all"  "!git st -s | awk {'print $2'} | xargs git assume"

say "Configuring aliases to set config values..."
new_alias "filemodeon" "config --local core.filemode true"
new_alias "filemodeoff" "config --local core.filemode false"