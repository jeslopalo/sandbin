#!/usr/bin/env sandbash

source "${SANDBIN_HOME}/scripts/lib/usage.lib.zsh"

source "$SANDBIN_HOME/scripts/sandbin/lib/sandbin.lib.zsh"
source "$SANDBIN_HOME/scripts/sandbin/lib/sandbin.reload.zsh"
source "$SANDBIN_HOME/scripts/sandbin/lib/sandbin.version.zsh"
source "$SANDBIN_HOME/scripts/sandbin/lib/sandbin.upgrade.zsh"

function usage() {
    local mode=$(usage_mode $1)
    local color=$(usage_description_color $mode $2)

    $(usage_show_description $mode) && printf "${color}It provides several utilities to configure sandbin${NORMAL}\n"
    $(usage_show_usage $mode) && printf "usage: ${BOLD}sandbin${NORMAL} [upgrade | reload | version] [-h, --help]\n"

    if usage_show_detailed $mode; then
        printf "\n"
        printf "    ${BOLD}upgrade${NORMAL}         Upgrade sandbin installation\n"
        printf "    ${BOLD}reload${NORMAL}          Reload sandbin installation\n"
        printf "    ${BOLD}version${NORMAL}         Display version information\n"
        printf "\nOptions:\n"
        printf "    ${BOLD}-h, --help${NORMAL}      Display this help\n"
    fi
}

function mutually_exclusive_subcommands_error() {

    printf "${RED}sandbin: Ouch! I can't execute '%s', another subcommand has been already selected${NORMAL}\n" "$1" 1>&2
    usage
}

function sandbin() {

    if [ $# = 0 ]; then
        printf "${RED}sandbin: Sorry! I need a sandbin subcommand to continue :(${NORMAL}\n" 1>&2
        usage
        exit 1;
    fi

    local subcommand
    while [[ $# -gt 0 ]];  do
        key="$1"

        case $key in
            upgrade)
                if [ ! -z $subcommand ]; then
                    mutually_exclusive_subcommands_error "$key"
                    exit 1
                fi
                subcommand="sandbin_upgrade"
            ;;
            reload)
                if [ ! -z $subcommand ]; then
                    mutually_exclusive_subcommands_error "$key"
                    exit 1
                fi
                subcommand="sandbin_reload"
            ;;
            version)
                if [ ! -z $subcommand ]; then
                    mutually_exclusive_subcommands_error "$key"
                    exit 1
                fi
                subcommand="print_sandbin_version"
            ;;
            -h|--help)
                usage "help"
                exit 0
            ;;
            *)
                printf "${RED}sandbin: Ouch! Unknown option '%s'. Please try agan!${NORMAL}\n" "$key" 1>&2
                usage
                exit 1
            ;;
        esac
        shift;
    done

    # execute subcommand
    exec $subcommand
    exit $?
}

sandbin "$@"

