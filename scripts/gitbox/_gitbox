#compdef gitbox

_gitbox() {

    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments -C \
        ':command:->command' \
        '*::options:->options'

    case $state in
        (command)
            local -a subcommands;

            subcommands=(
                'init:Execute \"git init\" & \"git flow init\"'
                'changelog:Calculate changelog of a git repository'
                'setup:Several git configurations'
            )
            _describe -t commands 'gitbox' subcommands
            _arguments \
                "(-h --help)"{-h,--help}"[Show help for gitbox usage]"
        ;;

        (options)
			case $line[1] in

				(init)
				    __gitbox-init
				;;

				(setup)
				    __gitbox-setup
                ;;

                (changelog)
                    __gitbox-changelog
                ;;
			esac
		;;
    esac
}

__gitbox-init() {
    _arguments \
        "(-f --force)"{-f,--force}'[Force setting of gitflow branches, even if already configured]' \
        "(-s --server)"{-s,--server}'[Initialize a bare shared repository]' \
        "(-h --help)"{-h,--help}"[Show help for gitbox init command]"
}

__gitbox-setup() {

    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments -C \
        ':command:->command' \
        '*::options:->options'

    case $state in
        (command)
            local -a subcommands;

            subcommands=(
                'aliases:Configure git aliases from a definition file'
                'attributes:Create .gitattributes file from a template'
                'user:Configure repository user.name'
                'email:Configure repository user.email'
            )
            _describe -t commands 'gitbox setup' subcommands
            _arguments \
                "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
        ;;

		(options)
			case $line[1] in
                (aliases)
                    __gitbox-setup-aliases
                ;;
                (attributes)
                    __gitbox-setup-attributes
                ;;
                (user)
                    __gitbox-setup-attribute 'gitbox setup user'
                ;;
                (email)
                    __gitbox-setup-attribute 'gitbox setup email'
                ;;
			esac
		;;
    esac
}

__gitbox-setup-aliases() {
    _arguments \
        ':scopes:__gitbox-setup-scopes' \
        "(-c --clean-aliases)"{-c,--clean-aliases}'[Clean aliases defined in the scope]' \
        ':file-prefixes:__gitbox-setup-aliases-files' \
        "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
}

__gitbox-setup-scopes() {
    local expl
    declare -a scopes

    scopes=("--system" "--global" "--local")

    _wanted scopes expl 'scope' compadd $* - $scopes
}

__gitbox-setup-aliases-files() {
    local expl
    declare -a file_prefixes

    local prefixes
    for file in $SANDBIN_HOME/dotfiles/gitaliases/*.gitaliases; do
        filename=${file##*/}
        prefix=${filename%.*}
        prefix=${prefix// /}
        prefixes="$prefix $prefixes"
    done

    file_prefixes=(${prefixes// /})

    _wanted file-prefixes expl file-prefix compadd $* - $file_prefixes
}

__gitbox-setup-attributes-files() {
    local expl
    declare -a file_prefixes

    local prefixes
    for file in $SANDBIN_HOME/dotfiles/gitattributes/*.gitattributes; do
        filename=${file##*/}
        prefix=${filename%.*}
        prefix=${prefix// /}
        prefixes="$prefix $prefixes"
    done

    file_prefixes=(${prefixes// /})

    _wanted file-prefixes expl file-prefix compadd $* - $file_prefixes
}

__installation_directory_prompt() {
    _path_files -/ -W "(~)"
}

#
# gitbox setup attributes [--to-dir <directory>] [-F | --force] [<attributes file prefix>] [-h | --help]
#
__gitbox-setup-attributes() {
    _arguments \
        --to-dir'[Installation directory]':directory:__installation_directory_prompt \
        "(-F --force)"{-F,--force}"[Rewrite original .gitattributes file if already exists.]" \
        ":file-prefixes:__gitbox-setup-attributes-files" \
        "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
}

__gitbox-setup-attribute() {

    local description=$1

    if [ ! -z $description ]; then

        local curcontext="$curcontext" state line
        typeset -A opt_args

        _arguments -C \
            ':command:->command' \
            '*::options:->options'

        case $state in
            (command)
                local -a subcommands;

                subcommands=()
                _describe -t commands $description subcommands

                _arguments \
                    ':scopes:__gitbox-setup-scopes' \
                    "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
            ;;

            (options)
                case $line[1] in

                    (--system|--global|--local)
                        _arguments \
                            "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
                    ;;
                esac
            ;;
        esac
    fi
}

__gitbox-changelog() {
    _arguments \
        "(-t --tag)"{-t,--tag}"[Tag to generate changelog]:tag name:__gitbox-tag-names" \
        --all'[Generate changelog for every tag]' \
        "(-h --help)"{-h,--help}"[Show help for gitbox changelog command]"
#        "(-s --subject)"{-s,--subject}"[Version subject message]:subject message:()" \
}

__gitbox-tag-names() {

    for tag in $(git for-each-ref --sort=-taggerdate --format="%(refname:short)" refs/tags 2>/dev/null); do
        tags="$tag $tags"

        compadd -X 'Available tags' "$tag"
    done
}

#_gitbox "$@"

# show completion menu when number of options is at least 2
zstyle ':completion:*' menu select=2

zstyle ':completion:*' user-commands gitbox:'provide high-level repository operations'
zstyle ':completion:*' completer _complete _approximate
zstyle ':completion:*:descriptions' format "- %d -"
zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose yes
zstyle ':completion:*' rehash yes
zstyle -e ':completion:*:approximate:*' max-errors \
          'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'

