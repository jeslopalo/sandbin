#compdef gitbox

_gitbox() {

    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments -C \
        ':command:->command' \
        '*::options:->options'

    case $state in
        (command)
            local -a subcommands;

            subcommands=(
                'initialize:Execute git init & git flow init'
                'setup:Several git configurations'
                'changelog:Calculate changelog of a git repository'
                'ranking:Show the position of a user in github ranking'
            )
            _describe -t commands 'gitbox' subcommands
            _arguments \
                "(-h --help)"{-h,--help}"[Show help for gitbox usage]"
        ;;

        (options)
			case $line[1] in
				(initialize)
				    __gitbox_initialize
				;;
				(setup)
				    __gitbox_setup
                ;;
                (changelog)
                    __gitbox_changelog
                ;;
                (ranking)
                    __gitbox_ranking
                ;;
			esac
		;;
    esac
}

__gitbox_initialize() {
    _arguments \
        "(-f --force)"{-f,--force}'[Force setting of gitflow branches, even if already configured]' \
        "(-s --server)"{-s,--server}'[Initialize a bare shared repository]' \
        "(-h --help)"{-h,--help}"[Show help for gitbox init command]"
}

__gitbox_setup() {

    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments -C \
        ':command:->command' \
        '*::options:->options'

    case $state in
        (command)
            local -a subcommands;

            subcommands=(
                'aliases:Configure git aliases from a definition file'
                'attributes:Create .gitattributes file from a template'
                'user:Configure repository user.name'
                'email:Configure repository user.email'
            )
            _describe -t commands 'gitbox setup' subcommands
            _arguments \
                "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
        ;;

		(options)
			case $line[1] in
                (aliases)
                    __gitbox_setup_aliases
                ;;
                (attributes)
                    __gitbox_setup_attributes
                ;;
                (user)
                    __gitbox_setup_attribute 'gitbox setup user'
                ;;
                (email)
                    __gitbox_setup_attribute 'gitbox setup email'
                ;;
			esac
		;;
    esac
}

__gitbox_setup_aliases() {
    _arguments \
        ':scopes:__gitbox_setup_scopes' \
        "(-c --clean-aliases)"{-c,--clean-aliases}'[Clean aliases defined in the scope]' \
        ':file-prefixes:__gitbox_setup_aliases_files' \
        "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
}

__gitbox_setup_scopes() {
    local expl
    declare -a scopes

    scopes=("--system" "--global" "--local")

    _wanted scopes expl 'scope' compadd $* - $scopes
}

__gitbox_setup_aliases_files() {
    local expl

    local prefixes
    for file in $SANDBIN_HOME/scripts/gitbox/aliases/*.aliases; do
        filename=${file##*/}
        prefix=${filename%.*}
        prefix=${prefix// /}
        prefixes="$prefix $prefixes"
    done

    _wanted file-prefixes expl 'file-prefix' compadd $(command echo "$prefixes" | tr ' ' '\n')
}

__gitbox_setup_attributes_files() {
    local expl

    local prefixes
    for file in $SANDBIN_HOME/dotfiles/gitattributes/*.gitattributes; do
        filename=${file##*/}
        prefix=${filename%.*}
        prefix=${prefix// /}
        prefixes="$prefix $prefixes"
    done

    _wanted file-prefixes expl 'file-prefix' compadd $(command echo "$prefixes" | tr ' ' '\n')
}

__installation_directory_prompt() {
    _path_files -/ -W "(~)"
}

#
# gitbox setup attributes [--to-dir <directory>] [-F | --force] [<attributes file prefix>] [-h | --help]
#
__gitbox_setup_attributes() {
    _arguments \
        --to-dir'[Installation directory]':directory:__installation_directory_prompt \
        "(-F --force)"{-F,--force}"[Rewrite original .gitattributes file if already exists.]" \
        ":file-prefixes:__gitbox_setup_attributes_files" \
        "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
}

__gitbox_setup_attribute() {

    local description=$1

    if [ ! -z $description ]; then

        local curcontext="$curcontext" state line
        typeset -A opt_args

        _arguments -C \
            ':command:->command' \
            '*::options:->options'

        case $state in
            (command)
                local -a subcommands;

                subcommands=()
                _describe -t commands $description subcommands

                _arguments \
                    ':scopes:__gitbox_setup_scopes' \
                    "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
            ;;
            (options)
                case $line[1] in

                    (--system|--global|--local)
                        _arguments \
                            "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
                    ;;
                esac
            ;;
        esac
    fi
}

__gitbox_changelog() {

    local curcontext="$curcontext" state line
    typeset -A opt_args

    _arguments -C \
        ':command:->command' \
        '*::options:->options'

    case $state in
        (command)
            local -a subcommands;

            subcommands=(
                "-t:Tag to generate changelog"
                "--tag:Tag to generate changelog"
                "--publish:Publish a changelog of every tag"
                "--all:Generate changelog of every tag"
            )
            _describe -t commands 'gitbox changelog' subcommands
            _arguments \
                "(-h --help)"{-h,--help}"[Show help for 'gitbox changelog' command]"
        ;;

		(options)
			case $line[1] in
                (-t|--tag)
                    _arguments ":tag name:__gitbox_tag_names"
                ;;
                (--publish)
                    _arguments \
                        ':Release message:()' \
                        '--to-file[File to write]:filename:_files' \
                        '--no-commit[Do not commit changes]'
                ;;
                (--all)
                ;;
                *)
                   _arguments \
                        "(-h --help)"{-h,--help}"[Show help for 'gitbox changelog' command]"
                ;;
			esac
		;;
    esac
}

__gitbox_tag_names() {

    for tag in $(git for-each-ref --sort=-taggerdate --format="%(refname:short)" refs/tags 2>/dev/null); do
        tags="$tag $tags"

        compadd -X 'Available tags' "$tag"
    done
}

__gitbox_ranking() {
    _arguments \
        ":username:()" \
        "(-c --columnize)"{-c,--columnize}"[Display raning in columns]" \
        --madrid'[Madrid ranking]' \
        --spain'[Spain ranking]' \
        --alt-spain'[Spain alternative ranking]' \
        "(-h --help)"{-h,--help}"[Show help for gitbox setup command]"
}

_gitbox "$@"
