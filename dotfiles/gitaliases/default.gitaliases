
say "Configuring aliases for aliases..."
new_alias "$scope" "aliases" "!git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/= /' | sed 's/^[a-z\-]*=/- $(tput bold)&$(tput sgr0)/'"
new_alias "$scope" "clean-aliases" "config $scope --remove-section alias"

say "Configuring aliases for history..."
new_alias "$scope" "history" "log --graph --pretty=format:'%C(bold red)%h%Creset %C(dim cyan)(%cr)%Creset %C(auto)%d%Creset | %C(bold)%s%C(reset) - %C(dim white)<%aN>%Creset' --abbrev-commit --date-order --date=relative --decorate --color"
new_alias "$scope" "history-of" "!git history --first-parent  2> /dev/null"
new_alias "$scope" "history-all" "!git history --all  2> /dev/null"
new_alias "$scope" "history-full" "log --graph --pretty=full --date-order --date=relative --decorate --color"
new_alias "$scope" "history-all-full" "!git history-full --all 2> /dev/null"
new_alias "$scope" "history-fuller" "log --graph --pretty=fuller --date-order --decorate --color --stat -p"
new_alias "$scope" "history-all-fuller" "!git history-fuller --all 2> /dev/null"

say "Configuring aliases for refs..."
new_alias "$scope" "refs" "!git history --simplify-by-decoration --no-merges"
new_alias "$scope" "refs-all" "!git refs --all"

say "Configuring aliases for today..."
new_alias "$scope" "today-me" "!git history-all --since='12am' --committer=\"\$(git me)\""
new_alias "$scope" "today-all" "!git history-all --since='12am'"

say "Configuring aliases for authors..."
new_alias "$scope" "me" "config user.name"
new_alias "$scope" "author" "!printf \"%s <%s>\\n\" \"\$(git config user.name)\" \"\$(git config user.email)\""
new_alias "$scope" "authors" '!git log --all --format="%C(bold yellow)%an%Creset - %C(dim white)<%ae>%Creset" | sort -u | column -s \$'-' -t'
new_alias "$scope" "committers" "!git log --pretty=format:\"%C(red)%ae%C(reset)\" | sort | uniq -c | sort -rn"
new_alias "$scope" "mergers" "!git log --pretty=format:\"%C(red)%ae%C(reset)\" --merges | sort | uniq -c | sort -rn"

say "Configuring aliases for workspace info..."
# find the workspace of current repository
new_alias "$scope" "workspace" "!git rev-parse --show-toplevel"

say "Configuring aliases form status..."
new_alias "$scope" "status-short" "status -sb -uno --ignore-submodules=untracked --untracked-files=normal --ignored"
new_alias "$scope" "st" "!git status-short"

say "Configuring aliases for changes..."
new_alias "$scope" "changelog" "!gitbox changelog"
new_alias "$scope" "changed-words" "diff --word-diff"
new_alias "$scope" "changed-files" "diff --stat"
new_alias "$scope" "changes-staged" "diff --staged"

say "Configuring aliases for branches..."
new_alias "$scope" "branch-publish" "!git push -u origin \$(git branch-name)"
new_alias "$scope" "branch-unpublish" "!git push origin --delete \$(git branch-name)"
new_alias "$scope" "branch-name" "rev-parse --abbrev-ref HEAD"
new_alias "$scope" "branch-rename" "branch -m"
new_alias "$scope" "branch-delete" "!f() { git branch -D \$1; git push origin --delete \$1; }; f"
new_alias "$scope" "branches" "!git for-each-ref --sort='-authordate' --format='%(authordate:iso) | %(color:bold green)%(refname:short)%(color:reset)%09- %(color:dim white)%(authoremail)%(color:reset)' refs/heads | column -s \$'\\t' -t"
new_alias "$scope" "branches-last-commit" "branch -vv -a"

say "Configuring aliases for tags..."
new_alias "$scope" "tags" "for-each-ref --sort=-taggerdate --format=\"%(color:dim cyan)%(taggerdate:iso)%(color:reset) - %(color:green)[%(refname:short)]%(color:reset) %09%(color:dim white)%(taggeremail)%(color:reset)%09// %(subject)\" refs/tags"
new_alias "$scope" "tag-commit" "rev-list -n 1"
new_alias "$scope" "tag-subject" "!f() { git for-each-ref refs/tags/\$1 --format='%(refname:short)#%(subject)' | cut -f 2 -d '#'; }; f"
new_alias "$scope" "last-tag" "!git show \$(git last-tag-id)"
new_alias "$scope" "last-tag-subject" "for-each-ref refs/tags --sort=-taggerdate --format='%(subject)' --count=1"
new_alias "$scope" "last-tag-id" "for-each-ref refs/tags --sort=-taggerdate --format='%(refname:short)' --count=1"
new_alias "$scope" "distance-from-tag" "!f() { git rev-list --count --no-merges \$1..HEAD; }; f"
new_alias "$scope" "distance-from-tags" "!git tag | while read t; do echo \"\$(git distance-from-tag \$t) commits ahead of '\$t'\"; done | sort -n"

say "Configuring aliases for commits..."
new_alias "$scope" "ci" "commit --verbose"
new_alias "$scope" "first-commit-id" "rev-list --max-parents=0 HEAD"
new_alias "$scope" "first-commit" "!git show \$(git first-commit-id)"
new_alias "$scope" "last-commit" "show HEAD"
new_alias "$scope" "last-commit-id" "rev-parse --verify HEAD"
# What's new? To see what new commits have been created by the last command (typically after a "git pull") :
new_alias "$scope" "commits-since-pull-in" "!sh -c 'git log \$1@{1}..\$1@{0} \"\$@\"'"

say "Configuring aliases for amends..."
# see: http://stackoverflow.com/a/25815116
new_alias "$scope" "amend-author-since-commit" "!f() { [ \$# = 1 ] && git rebase -i \$1 -x \"git commit --amend --reset-author -CHEAD\"; }; f"

say "Configuring aliases for conflicts..."
# shows list of files that have a merge conflict
new_alias "$scope" "conflicts" "!git --no-pager diff --name-only --diff-filter=U"

say "Configuring aliases for (un)stage..."
new_alias "$scope" "stage" "add"
new_alias "$scope" "unstage" "reset HEAD --"

say "Configuring aliases for push changes..."
new_alias "$scope" "push-all" "!git push --all && git push --tags"

say "Configuring aliases for remotes..."
new_alias "$scope" "show-origin" "remote show origin"

say "Configuring aliases for assume unchangeds..."
new_alias "$scope" "assume" "update-index --assume-unchanged"
new_alias "$scope" "unassume" "update-index --no-assume-unchanged"
new_alias "$scope" "assumed" "!git ls-files -v | grep ^h | cut -c 3-"
new_alias "$scope" "unassume-all" "!git assumed | xargs git update-index --no-assume-unchanged"
new_alias "$scope" "assume-all"  "!git st -s | awk {'print $2'} | xargs git assume"

say "Configuring aliases to set config values..."
new_alias "$scope" "filemodeon" "config --local core.filemode true"
new_alias "$scope" "filemodeoff" "config --local core.filemode false"
